// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-init/cmd/config"
)

type FakeConfig struct {
	EnvironmentStub        func() string
	environmentMutex       sync.RWMutex
	environmentArgsForCall []struct{}
	environmentReturns     struct {
		result1 string
	}
	EnvironmentsStub        func() []config.Environment
	environmentsMutex       sync.RWMutex
	environmentsArgsForCall []struct{}
	environmentsReturns     struct {
		result1 []config.Environment
	}
	ResolveEnvironmentStub        func(urlOrAlias string) string
	resolveEnvironmentMutex       sync.RWMutex
	resolveEnvironmentArgsForCall []struct {
		urlOrAlias string
	}
	resolveEnvironmentReturns struct {
		result1 string
	}
	SetEnvironmentStub        func(urlOrAlias, alias, caCert string) config.Config
	setEnvironmentMutex       sync.RWMutex
	setEnvironmentArgsForCall []struct {
		urlOrAlias string
		alias      string
		caCert     string
	}
	setEnvironmentReturns struct {
		result1 config.Config
	}
	CACertStub        func(url string) string
	cACertMutex       sync.RWMutex
	cACertArgsForCall []struct {
		url string
	}
	cACertReturns struct {
		result1 string
	}
	SkipSslValidationStub        func(url string) bool
	skipSslValidationMutex       sync.RWMutex
	skipSslValidationArgsForCall []struct {
		url string
	}
	skipSslValidationReturns struct {
		result1 bool
	}
	SetSkipSslValidationStub        func(url string, flag bool) config.Config
	setSkipSslValidationMutex       sync.RWMutex
	setSkipSslValidationArgsForCall []struct {
		url  string
		flag bool
	}
	setSkipSslValidationReturns struct {
		result1 config.Config
	}
	CredentialsStub        func(url string) config.Creds
	credentialsMutex       sync.RWMutex
	credentialsArgsForCall []struct {
		url string
	}
	credentialsReturns struct {
		result1 config.Creds
	}
	SetCredentialsStub        func(url string, creds config.Creds) config.Config
	setCredentialsMutex       sync.RWMutex
	setCredentialsArgsForCall []struct {
		url   string
		creds config.Creds
	}
	setCredentialsReturns struct {
		result1 config.Config
	}
	UnsetCredentialsStub        func(url string) config.Config
	unsetCredentialsMutex       sync.RWMutex
	unsetCredentialsArgsForCall []struct {
		url string
	}
	unsetCredentialsReturns struct {
		result1 config.Config
	}
	DeploymentStub        func(url string) string
	deploymentMutex       sync.RWMutex
	deploymentArgsForCall []struct {
		url string
	}
	deploymentReturns struct {
		result1 string
	}
	SetDeploymentStub        func(url, nameOrPath string) config.Config
	setDeploymentMutex       sync.RWMutex
	setDeploymentArgsForCall []struct {
		url        string
		nameOrPath string
	}
	setDeploymentReturns struct {
		result1 config.Config
	}
	SaveStub        func() error
	saveMutex       sync.RWMutex
	saveArgsForCall []struct{}
	saveReturns     struct {
		result1 error
	}
}

func (fake *FakeConfig) Environment() string {
	fake.environmentMutex.Lock()
	fake.environmentArgsForCall = append(fake.environmentArgsForCall, struct{}{})
	fake.environmentMutex.Unlock()
	if fake.EnvironmentStub != nil {
		return fake.EnvironmentStub()
	} else {
		return fake.environmentReturns.result1
	}
}

func (fake *FakeConfig) EnvironmentCallCount() int {
	fake.environmentMutex.RLock()
	defer fake.environmentMutex.RUnlock()
	return len(fake.environmentArgsForCall)
}

func (fake *FakeConfig) EnvironmentReturns(result1 string) {
	fake.EnvironmentStub = nil
	fake.environmentReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfig) Environments() []config.Environment {
	fake.environmentsMutex.Lock()
	fake.environmentsArgsForCall = append(fake.environmentsArgsForCall, struct{}{})
	fake.environmentsMutex.Unlock()
	if fake.EnvironmentsStub != nil {
		return fake.EnvironmentsStub()
	} else {
		return fake.environmentsReturns.result1
	}
}

func (fake *FakeConfig) EnvironmentsCallCount() int {
	fake.environmentsMutex.RLock()
	defer fake.environmentsMutex.RUnlock()
	return len(fake.environmentsArgsForCall)
}

func (fake *FakeConfig) EnvironmentsReturns(result1 []config.Environment) {
	fake.EnvironmentsStub = nil
	fake.environmentsReturns = struct {
		result1 []config.Environment
	}{result1}
}

func (fake *FakeConfig) ResolveEnvironment(urlOrAlias string) string {
	fake.resolveEnvironmentMutex.Lock()
	fake.resolveEnvironmentArgsForCall = append(fake.resolveEnvironmentArgsForCall, struct {
		urlOrAlias string
	}{urlOrAlias})
	fake.resolveEnvironmentMutex.Unlock()
	if fake.ResolveEnvironmentStub != nil {
		return fake.ResolveEnvironmentStub(urlOrAlias)
	} else {
		return fake.resolveEnvironmentReturns.result1
	}
}

func (fake *FakeConfig) ResolveEnvironmentCallCount() int {
	fake.resolveEnvironmentMutex.RLock()
	defer fake.resolveEnvironmentMutex.RUnlock()
	return len(fake.resolveEnvironmentArgsForCall)
}

func (fake *FakeConfig) ResolveEnvironmentArgsForCall(i int) string {
	fake.resolveEnvironmentMutex.RLock()
	defer fake.resolveEnvironmentMutex.RUnlock()
	return fake.resolveEnvironmentArgsForCall[i].urlOrAlias
}

func (fake *FakeConfig) ResolveEnvironmentReturns(result1 string) {
	fake.ResolveEnvironmentStub = nil
	fake.resolveEnvironmentReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfig) SetEnvironment(urlOrAlias string, alias string, caCert string) config.Config {
	fake.setEnvironmentMutex.Lock()
	fake.setEnvironmentArgsForCall = append(fake.setEnvironmentArgsForCall, struct {
		urlOrAlias string
		alias      string
		caCert     string
	}{urlOrAlias, alias, caCert})
	fake.setEnvironmentMutex.Unlock()
	if fake.SetEnvironmentStub != nil {
		return fake.SetEnvironmentStub(urlOrAlias, alias, caCert)
	} else {
		return fake.setEnvironmentReturns.result1
	}
}

func (fake *FakeConfig) SetEnvironmentCallCount() int {
	fake.setEnvironmentMutex.RLock()
	defer fake.setEnvironmentMutex.RUnlock()
	return len(fake.setEnvironmentArgsForCall)
}

func (fake *FakeConfig) SetEnvironmentArgsForCall(i int) (string, string, string) {
	fake.setEnvironmentMutex.RLock()
	defer fake.setEnvironmentMutex.RUnlock()
	return fake.setEnvironmentArgsForCall[i].urlOrAlias, fake.setEnvironmentArgsForCall[i].alias, fake.setEnvironmentArgsForCall[i].caCert
}

func (fake *FakeConfig) SetEnvironmentReturns(result1 config.Config) {
	fake.SetEnvironmentStub = nil
	fake.setEnvironmentReturns = struct {
		result1 config.Config
	}{result1}
}

func (fake *FakeConfig) CACert(url string) string {
	fake.cACertMutex.Lock()
	fake.cACertArgsForCall = append(fake.cACertArgsForCall, struct {
		url string
	}{url})
	fake.cACertMutex.Unlock()
	if fake.CACertStub != nil {
		return fake.CACertStub(url)
	} else {
		return fake.cACertReturns.result1
	}
}

func (fake *FakeConfig) CACertCallCount() int {
	fake.cACertMutex.RLock()
	defer fake.cACertMutex.RUnlock()
	return len(fake.cACertArgsForCall)
}

func (fake *FakeConfig) CACertArgsForCall(i int) string {
	fake.cACertMutex.RLock()
	defer fake.cACertMutex.RUnlock()
	return fake.cACertArgsForCall[i].url
}

func (fake *FakeConfig) CACertReturns(result1 string) {
	fake.CACertStub = nil
	fake.cACertReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfig) SkipSslValidation(url string) bool {
	fake.skipSslValidationMutex.Lock()
	fake.skipSslValidationArgsForCall = append(fake.skipSslValidationArgsForCall, struct {
		url string
	}{url})
	fake.skipSslValidationMutex.Unlock()
	if fake.SkipSslValidationStub != nil {
		return fake.SkipSslValidationStub(url)
	} else {
		return fake.skipSslValidationReturns.result1
	}
}

func (fake *FakeConfig) SkipSslValidationCallCount() int {
	fake.skipSslValidationMutex.RLock()
	defer fake.skipSslValidationMutex.RUnlock()
	return len(fake.skipSslValidationArgsForCall)
}

func (fake *FakeConfig) SkipSslValidationArgsForCall(i int) string {
	fake.skipSslValidationMutex.RLock()
	defer fake.skipSslValidationMutex.RUnlock()
	return fake.skipSslValidationArgsForCall[i].url
}

func (fake *FakeConfig) SkipSslValidationReturns(result1 bool) {
	fake.SkipSslValidationStub = nil
	fake.skipSslValidationReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeConfig) SetSkipSslValidation(url string, flag bool) config.Config {
	fake.setSkipSslValidationMutex.Lock()
	fake.setSkipSslValidationArgsForCall = append(fake.setSkipSslValidationArgsForCall, struct {
		url  string
		flag bool
	}{url, flag})
	fake.setSkipSslValidationMutex.Unlock()
	if fake.SetSkipSslValidationStub != nil {
		return fake.SetSkipSslValidationStub(url, flag)
	} else {
		return fake.setSkipSslValidationReturns.result1
	}
}

func (fake *FakeConfig) SetSkipSslValidationCallCount() int {
	fake.setSkipSslValidationMutex.RLock()
	defer fake.setSkipSslValidationMutex.RUnlock()
	return len(fake.setSkipSslValidationArgsForCall)
}

func (fake *FakeConfig) SetSkipSslValidationArgsForCall(i int) (string, bool) {
	fake.setSkipSslValidationMutex.RLock()
	defer fake.setSkipSslValidationMutex.RUnlock()
	return fake.setSkipSslValidationArgsForCall[i].url, fake.setSkipSslValidationArgsForCall[i].flag
}

func (fake *FakeConfig) SetSkipSslValidationReturns(result1 config.Config) {
	fake.SetSkipSslValidationStub = nil
	fake.setSkipSslValidationReturns = struct {
		result1 config.Config
	}{result1}
}

func (fake *FakeConfig) Credentials(url string) config.Creds {
	fake.credentialsMutex.Lock()
	fake.credentialsArgsForCall = append(fake.credentialsArgsForCall, struct {
		url string
	}{url})
	fake.credentialsMutex.Unlock()
	if fake.CredentialsStub != nil {
		return fake.CredentialsStub(url)
	} else {
		return fake.credentialsReturns.result1
	}
}

func (fake *FakeConfig) CredentialsCallCount() int {
	fake.credentialsMutex.RLock()
	defer fake.credentialsMutex.RUnlock()
	return len(fake.credentialsArgsForCall)
}

func (fake *FakeConfig) CredentialsArgsForCall(i int) string {
	fake.credentialsMutex.RLock()
	defer fake.credentialsMutex.RUnlock()
	return fake.credentialsArgsForCall[i].url
}

func (fake *FakeConfig) CredentialsReturns(result1 config.Creds) {
	fake.CredentialsStub = nil
	fake.credentialsReturns = struct {
		result1 config.Creds
	}{result1}
}

func (fake *FakeConfig) SetCredentials(url string, creds config.Creds) config.Config {
	fake.setCredentialsMutex.Lock()
	fake.setCredentialsArgsForCall = append(fake.setCredentialsArgsForCall, struct {
		url   string
		creds config.Creds
	}{url, creds})
	fake.setCredentialsMutex.Unlock()
	if fake.SetCredentialsStub != nil {
		return fake.SetCredentialsStub(url, creds)
	} else {
		return fake.setCredentialsReturns.result1
	}
}

func (fake *FakeConfig) SetCredentialsCallCount() int {
	fake.setCredentialsMutex.RLock()
	defer fake.setCredentialsMutex.RUnlock()
	return len(fake.setCredentialsArgsForCall)
}

func (fake *FakeConfig) SetCredentialsArgsForCall(i int) (string, config.Creds) {
	fake.setCredentialsMutex.RLock()
	defer fake.setCredentialsMutex.RUnlock()
	return fake.setCredentialsArgsForCall[i].url, fake.setCredentialsArgsForCall[i].creds
}

func (fake *FakeConfig) SetCredentialsReturns(result1 config.Config) {
	fake.SetCredentialsStub = nil
	fake.setCredentialsReturns = struct {
		result1 config.Config
	}{result1}
}

func (fake *FakeConfig) UnsetCredentials(url string) config.Config {
	fake.unsetCredentialsMutex.Lock()
	fake.unsetCredentialsArgsForCall = append(fake.unsetCredentialsArgsForCall, struct {
		url string
	}{url})
	fake.unsetCredentialsMutex.Unlock()
	if fake.UnsetCredentialsStub != nil {
		return fake.UnsetCredentialsStub(url)
	} else {
		return fake.unsetCredentialsReturns.result1
	}
}

func (fake *FakeConfig) UnsetCredentialsCallCount() int {
	fake.unsetCredentialsMutex.RLock()
	defer fake.unsetCredentialsMutex.RUnlock()
	return len(fake.unsetCredentialsArgsForCall)
}

func (fake *FakeConfig) UnsetCredentialsArgsForCall(i int) string {
	fake.unsetCredentialsMutex.RLock()
	defer fake.unsetCredentialsMutex.RUnlock()
	return fake.unsetCredentialsArgsForCall[i].url
}

func (fake *FakeConfig) UnsetCredentialsReturns(result1 config.Config) {
	fake.UnsetCredentialsStub = nil
	fake.unsetCredentialsReturns = struct {
		result1 config.Config
	}{result1}
}

func (fake *FakeConfig) Deployment(url string) string {
	fake.deploymentMutex.Lock()
	fake.deploymentArgsForCall = append(fake.deploymentArgsForCall, struct {
		url string
	}{url})
	fake.deploymentMutex.Unlock()
	if fake.DeploymentStub != nil {
		return fake.DeploymentStub(url)
	} else {
		return fake.deploymentReturns.result1
	}
}

func (fake *FakeConfig) DeploymentCallCount() int {
	fake.deploymentMutex.RLock()
	defer fake.deploymentMutex.RUnlock()
	return len(fake.deploymentArgsForCall)
}

func (fake *FakeConfig) DeploymentArgsForCall(i int) string {
	fake.deploymentMutex.RLock()
	defer fake.deploymentMutex.RUnlock()
	return fake.deploymentArgsForCall[i].url
}

func (fake *FakeConfig) DeploymentReturns(result1 string) {
	fake.DeploymentStub = nil
	fake.deploymentReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfig) SetDeployment(url string, nameOrPath string) config.Config {
	fake.setDeploymentMutex.Lock()
	fake.setDeploymentArgsForCall = append(fake.setDeploymentArgsForCall, struct {
		url        string
		nameOrPath string
	}{url, nameOrPath})
	fake.setDeploymentMutex.Unlock()
	if fake.SetDeploymentStub != nil {
		return fake.SetDeploymentStub(url, nameOrPath)
	} else {
		return fake.setDeploymentReturns.result1
	}
}

func (fake *FakeConfig) SetDeploymentCallCount() int {
	fake.setDeploymentMutex.RLock()
	defer fake.setDeploymentMutex.RUnlock()
	return len(fake.setDeploymentArgsForCall)
}

func (fake *FakeConfig) SetDeploymentArgsForCall(i int) (string, string) {
	fake.setDeploymentMutex.RLock()
	defer fake.setDeploymentMutex.RUnlock()
	return fake.setDeploymentArgsForCall[i].url, fake.setDeploymentArgsForCall[i].nameOrPath
}

func (fake *FakeConfig) SetDeploymentReturns(result1 config.Config) {
	fake.SetDeploymentStub = nil
	fake.setDeploymentReturns = struct {
		result1 config.Config
	}{result1}
}

func (fake *FakeConfig) Save() error {
	fake.saveMutex.Lock()
	fake.saveArgsForCall = append(fake.saveArgsForCall, struct{}{})
	fake.saveMutex.Unlock()
	if fake.SaveStub != nil {
		return fake.SaveStub()
	} else {
		return fake.saveReturns.result1
	}
}

func (fake *FakeConfig) SaveCallCount() int {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return len(fake.saveArgsForCall)
}

func (fake *FakeConfig) SaveReturns(result1 error) {
	fake.SaveStub = nil
	fake.saveReturns = struct {
		result1 error
	}{result1}
}

var _ config.Config = new(FakeConfig)
